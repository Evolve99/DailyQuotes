package com.rutershok.daily

import android.os.Bundle
import android.os.Handler
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.SearchView
import androidx.recyclerview.widget.RecyclerView
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
import com.androidnetworking.error.ANError
import com.androidnetworking.interfaces.ParsedRequestListener
import com.rutershok.daily.adapters.quotes.QuotesAdapter
import com.rutershok.daily.database.Server
import com.rutershok.daily.model.Quote
import com.rutershok.daily.utils.Snackbar.showNoConnection
import java.util.*

class SearchActivity : AppCompatActivity() {
    private val mQuotes: MutableList<Quote> = ArrayList()
    private var mQuotesAdapter: QuotesAdapter? = null
    private var mTextNoQuotesFound: TextView? = null
    private var mSwipeRefresh: SwipeRefreshLayout? = null
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_search)
        setTitle(R.string.search)
        if (null != supportActionBar) {
            supportActionBar!!.setDisplayHomeAsUpEnabled(true)
        }
        mTextNoQuotesFound = findViewById(R.id.text_no_results)
        initSwipeRefresh()
        initRecyclerView()

        // Ad.showBanner(this);
    }

    private fun initSwipeRefresh() {
        // SwipeRefreshLayout
        mSwipeRefresh = findViewById(R.id.swipe_search)
        (mSwipeRefresh as SwipeRefreshLayout).setOnRefreshListener {
            mSwipeRefresh!!.isRefreshing = false
        }
        (mSwipeRefresh as SwipeRefreshLayout).setColorSchemeResources(
            android.R.color.holo_red_dark,
            android.R.color.holo_green_dark,
            android.R.color.holo_orange_dark,
            android.R.color.holo_blue_dark
        )
    }

    private fun initRecyclerView() {
        mQuotesAdapter = QuotesAdapter(this, mQuotes)
        val recyclerView = findViewById<RecyclerView>(R.id.recycler_search_quotes)
        recyclerView.adapter = mQuotesAdapter
        recyclerView.setHasFixedSize(true)
    }

    private fun search(query: String?) {
        //Check if there is something to search
        if (null != query && !query.trim { it <= ' ' }.isEmpty()) {
            mSwipeRefresh!!.isRefreshing = true
            Server.searchQuotes(query, object : ParsedRequestListener<List<Quote>?> {
                override fun onResponse(response: List<Quote>?) {
                    //In both cases hide progress bar
                    mSwipeRefresh!!.isRefreshing = false
                    if (null != response) {
                        mQuotes.clear()
                        mQuotes.addAll(response)
                        mQuotesAdapter!!.notifyDataSetChanged()
                        if (mQuotes.isEmpty()) {
                            mTextNoQuotesFound!!.visibility = View.VISIBLE
                        } else {
                            mTextNoQuotesFound!!.visibility = View.INVISIBLE
                        }
                    }
                }

                override fun onError(anError: ANError) {
                    mSwipeRefresh!!.isRefreshing = false
                    mTextNoQuotesFound!!.visibility = View.VISIBLE
                    if (anError.errorDetail == Server.CONNECTION_ERROR) {
                        showNoConnection(this@SearchActivity) { v: View? -> search(query) }

                        //Check server status
                        Server.check(this@SearchActivity)
                    }
                }
            })
        }
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_search, menu)
        val searchView = menu.findItem(R.id.action_search).actionView as SearchView
        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
            override fun onQueryTextSubmit(query: String): Boolean {
                search(query)
                return false
            }

            override fun onQueryTextChange(newText: String): Boolean {
                //Use this to delay search and avoid "flash" effect generated by clear and add of logo_phrases
                Handler().postDelayed({ search(newText) }, 1000)
                return false
            }
        })
        return super.onCreateOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        if (android.R.id.home == item.itemId) {
            finish()
        }
        return super.onOptionsItemSelected(item)
    }
}